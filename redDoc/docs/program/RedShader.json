[
  {
    "code": "PROPERTY",
    "title": "key",
    "description": "고유키",
    "return": "String"
  },
  {
    "code": "PROPERTY",
    "title": "parseData",
    "description": "쉐이더 해석 데이터",
    "return": "Object"
  },
  {
    "constructorYn": true,
    "title": "RedShader",
    "description": "\n\t RedShader Instance 생성기\n\t RedSystemShaderCode 소스와 머징된 RedShader Instance를 생성\n ",
    "params": {
      "redGL": [
        {
          "type": "RedGL"
        }
      ],
      "key": [
        {
          "type": "String"
        },
        "고유키"
      ],
      "type": [
        {
          "type": "RedShader.VERTEX or RedShader.FRAGMENT"
        },
        "버퍼 타입"
      ],
      "source": [
        {
          "type": "String"
        },
        "쉐이더 문자열 소스"
      ]
    },
    "example": "\n RedShader(RedGL Instance, 'test', RedShader.VERTEX, 'vec3 test; void main(){}')\n RedShader(RedGL Instance, 'test', RedShader.FRAGMENT, 'precision mediump float;vec3 test; void main(){test;}')\n ",
    "return": "RedShader Instance"
  },
  {
    "title": "RedShader.FRAGMENT",
    "code": "CONST",
    "description": "프레그먼트 쉐이더 상수",
    "return": "String"
  },
  {
    "title": "RedShader.hasKey",
    "code": "STATIC METHOD",
    "description": "키에 해당하는 쉐이더 존재 여부 반환",
    "params": {
      "redGL": [
        {
          "type": "RedGL"
        }
      ],
      "key": [
        {
          "type": "String"
        },
        "고유키"
      ],
      "type": [
        {
          "type": "RedShader.VERTEX or RedShader.FRAGMENT"
        },
        "버퍼 타입"
      ]
    },
    "example": "\n\t RedShader.haskey(RedGL Instance, '찾고자하는키', RedShader.FRAGMENT or RedShader.VERTEX)\n ",
    "return": "Boolean"
  },
  {
    "title": "RedShader.VERTEX",
    "code": "CONST",
    "description": "버텍스 쉐이더 상수",
    "return": "String"
  },
  {
    "code": "PROPERTY",
    "title": "type",
    "description": "RedShader.VERTEX or RedShader.FRAGMENT",
    "return": "String"
  },
  {
    "code": "PROPERTY",
    "title": "webglShader",
    "description": "실제 쉐이더(WebGLShader Instance)",
    "return": "WebGLShader"
  }
]